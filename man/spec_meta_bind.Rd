% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/spec-meta-bind-runner.R, R/spec-meta-bind.R
\docType{data}
\name{spec_meta_bind}
\alias{spec_meta_bind}
\alias{spec_meta_bind}
\title{spec_meta_bind}
\value{
\code{dbBind()} returns the result set,
invisibly.
Empty binding.
Binding of integer values raises an
error if connection is closed.
Binding of integer values with too many
values.
Binding of integer values with too few
values.
Binding of integer values, repeated.
Binding of integer values with wrong names.
Binding of integer values.
Binding of numeric values.
Binding of logical values.
Binding of logical values (coerced to integer).
Binding of \code{NULL} values.
Binding of character values.
Binding of date values.
Binding of \link{POSIXct} timestamp values.
Binding of \link{POSIXlt} timestamp values.
Binding of raw values.
Binding of statements.
}
\description{
spec_meta_bind

spec_meta_bind
}
\section{Specification}{

\pkg{DBI} clients execute parametrized statements as follows:
\enumerate{
\item Call \code{\link[DBI:dbSendQuery]{DBI::dbSendQuery()}} or \code{\link[DBI:dbSendStatement]{DBI::dbSendStatement()}} with a query or statement
that contains placeholders,
store the returned \link[DBI:DBIResult-class]{DBI::DBIResult} object in a variable.
Mixing placeholders (in particular, named and unnamed ones) is not
recommended.
It is good practice to register a call to \code{\link[DBI:dbClearResult]{DBI::dbClearResult()}} via
\code{\link[=on.exit]{on.exit()}} right after calling \code{dbSendQuery()} or \code{dbSendStatement()}
(see the last enumeration item).
\item Construct a list with parameters
that specify actual values for the placeholders.
The list must be named or unnamed,
depending on the kind of placeholders used.
Named values are matched to named parameters, unnamed values
are matched by position.
All elements in this list must have the same lengths and contain values
supported by the backend; a \link{data.frame} is internally stored as such
a list.
The parameter list is passed to a call to \code{dbBind()} on the \code{DBIResult}
object.
\item Retrieve the data or the number of affected rows from the \code{DBIResult} object.
\itemize{
\item For queries issued by \code{dbSendQuery()},
call \code{\link[DBI:dbFetch]{DBI::dbFetch()}}.
\item For statements issued by \code{dbSendStatements()},
call \code{\link[DBI:dbGetRowsAffected]{DBI::dbGetRowsAffected()}}.
(Execution begins immediately after the \code{dbBind()} call,
the statement is processed entirely before the function returns.)
}
\item Repeat 2. and 3. as necessary.
\item Close the result set via \code{\link[DBI:dbClearResult]{DBI::dbClearResult()}}.
}


Repeated binding of statements.
}

